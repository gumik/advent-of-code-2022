module Day09Test where
import Test.HUnit (test, Test(TestLabel, TestCase), assertEqual, (~:), (~=?))
import Common (Solution(solutionRun, solutionName), NoSolution(..))
import Day09 (move)

tests = TestLabel "Day09Test" $ test
    [ "( 0,  0)" ~: (0, 0) ~=? Day09.move (0, 0) ( 0,  0)
    , "( 1,  0)" ~: (0, 0) ~=? Day09.move (0, 0) ( 1,  0)
    , "(-1,  0)" ~: (0, 0) ~=? Day09.move (0, 0) (-1,  0)
    , "(-1, -1)" ~: (0, 0) ~=? Day09.move (0, 0) (-1, -1)
    , "( 0, -1)" ~: (0, 0) ~=? Day09.move (0, 0) ( 0, -1)
    , "( 1, -1)" ~: (0, 0) ~=? Day09.move (0, 0) ( 1, -1)
    , "(-1,  1)" ~: (0, 0) ~=? Day09.move (0, 0) (-1,  1)
    , "( 0,  1)" ~: (0, 0) ~=? Day09.move (0, 0) ( 0,  1)
    , "( 1,  1)" ~: (0, 0) ~=? Day09.move (0, 0) ( 1,  1)

    , "(-2,  2)" ~: (-1,  1) ~=? Day09.move (0, 0) (-2,  2)
    , "(-1,  2)" ~: (-1,  1) ~=? Day09.move (0, 0) (-1,  2)
    , "( 0,  2)" ~: ( 0,  1) ~=? Day09.move (0, 0) ( 0,  2)
    , "( 1,  2)" ~: ( 1,  1) ~=? Day09.move (0, 0) ( 1,  2)
    , "( 2,  2)" ~: ( 1,  1) ~=? Day09.move (0, 0) ( 2,  2)
    , "( 2,  1)" ~: ( 1,  1) ~=? Day09.move (0, 0) ( 2,  1)
    , "( 2,  0)" ~: ( 1,  0) ~=? Day09.move (0, 0) ( 2,  0)
    , "( 2, -1)" ~: ( 1, -1) ~=? Day09.move (0, 0) ( 2, -1)
    , "( 2, -2)" ~: ( 1, -1) ~=? Day09.move (0, 0) ( 2, -2)
    , "( 1, -2)" ~: ( 1, -1) ~=? Day09.move (0, 0) ( 1, -2)
    , "( 0, -2)" ~: ( 0, -1) ~=? Day09.move (0, 0) ( 0, -2)
    , "(-1, -2)" ~: (-1, -1) ~=? Day09.move (0, 0) (-1, -2)
    , "(-2, -2)" ~: (-1, -1) ~=? Day09.move (0, 0) (-2, -2)
    , "(-2, -1)" ~: (-1, -1) ~=? Day09.move (0, 0) (-2, -1)
    , "(-2,  0)" ~: (-1,  0) ~=? Day09.move (0, 0) (-2,  0)
    , "(-2,  1)" ~: (-1,  1) ~=? Day09.move (0, 0) (-2,  1)
    ]

